//Interface
//This will help you extract func sig without doing cast
#define function updateHorseNumber(uint256) nonpayable returns()
#define function getHorseNumber() view returns(uint256)

//it will place the it to 0th slot
//ita a type of a counter
#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER() // 0

#define macro MAIN() = takes(0) returns(0) {
    0x00             // [0]   <-- stack
    //0x02             // TOP->[2,0]<-BOTTOM
    calldataload    // [CALLDATA]   <-- stack
    //How to fetch function selector?
    0xE0            // [0xe0, calldata (32)]     This is the number of bytes to shift right
    shr             // [function_selector  ]  this is the shift right opcode

    //jump -> function data associated with the selector
    // If f_select ==updateHorsr -> jump to that code
    //if f_select == getHorse -> jump to that code

    //0xcdfead2e --> update
    // 0xe026c017 --> read
    dup1            // [function_selector, function_selector]  <-- stack
    //0xcdfead2e     // [0xcdfead2e, function_selector, function_selector]  <-- stack
    //Below function will automatically extract the function selector
    __FUNC_SIG(updateHorseNumber)     // [0xcdfead2e, function_selector, function_selector]  <-- stack
    eq            // [trie_if_func_selctor_matches,function_selector]  <-- stack

    updateJump      // [updateHorseNumberProgramCounter, true/false,function_selector]  <-- stack
    jumpi           //[function_selector,]

    //0xe026c017    // [0xe026c017, function_selector]  <-- stack
    __FUNC_SIG(getHorseNumber)     // [0xe026c017, function_selector]  <-- stack
    eq           // [trie_if_func_selctor_matches,function_selector]  <-- stack
    readJump      // [readHorseNumberProgramCounter, true/false,function_selector]  <-- stack
    jumpi           //[]

    0x00 0x00 revert // [] <-- empty stack.Revert if no function selector matches it will prevent the execution of the contract

    updateJump:
        SET_NUMBER_OF_HORSE()

    readJump:
        GET_NUMBER_OF_HORSE()
} 

#define macro SET_NUMBER_OF_HORSE() = takes(0) returns(0) {

    //2. Get the value to store from calldata
    0x04 // [4]  <-- stack
    calldataload // [INPUT[4]]  <-- stack
    //1. Give it a storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT] //[Storage_slot,value,function_selector]  <- stack at 1th index
    
    //3. sstore opcode
    sstore
    stop

}

#define macro GET_NUMBER_OF_HORSE() = takes(0) returns(0) {
    //1 Get the storage slot
    [NUMBER_OF_HORSES_STORAGE_SLOT] // [Storage_slot,function_selector]  <- stack 
    //2. load the value from storage slot
    sload // [storage_slot,value,function_selector]  <- stack
    0x00 // [0,storage_slot,value,function_selector]  <- stack
    mstore //[] <- stack
    0x20 0x00
    return 
    stop

    //3. Return the value
}